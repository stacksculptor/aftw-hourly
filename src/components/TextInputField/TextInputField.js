import React, { PropTypes } from 'react';
import { Field } from 'redux-form';
import classNames from 'classnames';
import { ValidationError } from '../../components';

import css from './TextInputField.css';

const TextInputFieldComponent = props => {
  const {
    rootClassName,
    className,
    id,
    label,
    type,
    input,
    meta,
    ...rest
  } = props;

  if (label && !id) {
    throw new Error('id required when a label is given');
  }

  const { valid, invalid, touched, error } = meta;
  const isTextarea = type === 'textarea';

  // Error message and input error styles are only shown if the
  // field has been touched and the validation has failed.
  const hasError = touched && invalid && error;

  const inputClasses = classNames(css.input, {
    [css.inputSuccess]: valid,
    [css.inputError]: hasError,
  });
  const inputProps = isTextarea
    ? { className: inputClasses, id, ...input, ...rest }
    : { className: inputClasses, id, type, ...input, ...rest };

  const classes = classNames(rootClassName || css.root, className);
  return (
    <div className={classes}>
      {label ? <label htmlFor={id}>{label}</label> : null}
      {isTextarea ? <textarea {...inputProps} /> : <input {...inputProps} />}
      <ValidationError fieldMeta={meta} />
    </div>
  );
};

TextInputFieldComponent.defaultProps = {
  rootClassName: null,
  className: null,
  id: null,
  label: null,
};

const { string, object } = PropTypes;

TextInputFieldComponent.propTypes = {
  rootClassName: string,
  className: string,

  // Label is optional, but if it is given, an id is also required so
  // the label can reference the input in the `for` attribute
  id: string,
  label: string,

  // Either 'textarea' or something that is passed to the input element
  type: string.isRequired,

  // Generated by redux-form's Field component
  input: object.isRequired,
  meta: object.isRequired,
};

const TextInputField = props => {
  return <Field component={TextInputFieldComponent} {...props} />;
};

export default TextInputField;
